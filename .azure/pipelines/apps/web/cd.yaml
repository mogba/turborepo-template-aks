parameters:
  - name: manualDeploymentType
    type: string
    default: "Build_and_deploy"
    displayName: "Deployment type"
    values:
      - Build_and_deploy
      - Validate_build_and_deploy

resources:
  pipelines:
    - pipeline: ciPipeline
      source: PROJECT_NAME_CI
      trigger:
        branches:
          include:
            - main
        stages:
          - CI

trigger: none
pr: none

variables:
  # Set effectiveDeploymentType based on trigger source
  ${{ if eq(variables['resources.pipeline.ciPipeline.requestedFor'], '') }}:
    effectiveDeploymentType: ${{ parameters.manualDeploymentType }}
  ${{ else }}:
    effectiveDeploymentType: "Automatic_deploy"

  projectName: "PROJECT_NAME"
  appName: "web"
  appDomain: ""
  loadBalancerIp: 00.000.000.000
  serviceName: "$(appName)-service"
  serviceAccountName: "$(appName)-service-account"
  dockerfile: "apps/$(appName)/Dockerfile"
  containerRegistryAddress: ""
  environment: "production"
  environmentSufix: "prod"
  buildContext: "."
  containerRegistryServiceConnectionId: ""
  buildTag: $(Build.BuildId)
  k8sConnection: "$(environmentSufix)-aks-connection"
  replicas: 3
  containerPort: 3000
  cpuRequest: "100m"
  memoryRequest: "128Mi"
  cpuLimit: "100m"
  memoryLimit: "128Mi"
  azureKeyVaultName: ""
  azureKeyVaultAddress: ""
  azureSubscription: ""
  azureTenantId: ""
  imageSignKey: ""
  imageDigest: ""

stages:
  # Manual run: Build and Deploy
  - ${{ if and(eq(parameters.effectiveDeploymentType, 'Build_and_deploy'), eq(variables['Build.Reason'], 'Manual')) }}:
      - stage: BuildAndPushImage
        jobs:
          - job: BuildAndPushImage
            steps:
              - template: ../../templates/build-push-image.yaml
                parameters:
                  appName: $(appName)
                  dockerfile: $(dockerfile)
                  buildContext: $(buildContext)
                  containerRegistryServiceConnectionId: $(containerRegistryServiceConnectionId)
                  buildTag: $(buildTag)

  # Manual run: Validate, Build and Deploy
  - ${{ if and(eq(parameters.effectiveDeploymentType, 'Validate_build_and_deploy'), eq(variables['Build.Reason'], 'Manual')) }}:
      - template: ci.yaml

  - stage: CD
    condition: |
      or(
        and(
          succeeded(),
          not(eq(variables.effectiveDeploymentType, 'Automatic_deploy'))
        ),
        and(
          eq(variables.effectiveDeploymentType, 'Automatic_deploy'),
          eq(resources.pipeline.ciPipeline.result, 'succeeded'),
          eq(resources.pipeline.ciPipeline.sourceBranch, 'refs/heads/main')
        )
      )
    jobs:
      - deployment: Deploy
        environment: $(environment)
        strategy:
          runOnce:
            preDeploy:
              steps:
                - template: ../../templates/connect-akv.yaml
                  parameters:
                    appName: $(appName)
                    azureSubscription: $(azureSubscription)
                    azureKeyVaultName: $(azureKeyVaultName)

                - template: ../../templates/sign-image.yaml
                  parameters:
                    appName: $(appName)
                    imageDigest: $(imageDigest)
                    containerRegistryAddress: $(containerRegistryAddress)
                    azureKeyVaultAddress: $(azureKeyVaultAddress)
                    azureTenantId: $(azureTenantId)
                    azureSubscriptionName: $(azureSubscriptionName)
                    azureClientId: $(azureClientId)
                    azureClientSecret: $(azureClientSecret)
                    imageSignKey: $(imageSignKey)
                    buildTag: $(buildTag)

            deploy:
              steps:
                - template: ../../templates/deploy-pods.yaml
                  parameters:
                    appName: $(appName)
                    k8sNamespace: $(environmentSufix)
                    k8sConnection: $(k8sConnection)
                    containerRegistryAddress: $(containerRegistryAddress)
                    buildTag: $(buildTag)

            routeTraffic:
              steps:
                - template: ../../templates/health-check.yaml
                  parameters:
                    appName: $(appName)
                    k8sNamespace: $(environmentSufix)
                    k8sConnection: $(k8sConnection)
                    timeoutSeconds: 300

            postRouteTraffic:
              steps:
                - template: ../../templates/error-handling.yaml
                  parameters:
                    appName: $(appName)
                    k8sNamespace: $(environmentSufix)
                    rollbackOnFailure: true
